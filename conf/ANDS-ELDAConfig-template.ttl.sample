##############################################################
#
# This is the template LDA configuration for a SISSvoc service
# Reference - <https://www.seegrid.csiro.au/wiki/Siss/SISSvoc30Specification>
#
# Copyright (c) CSIRO 2012,2014
# Re-use permitted according to Creative Commons Attribution 3.0 Australia (CC BY 3.0)
# see <http://creativecommons.org/licenses/by/3.0/au/>
#
# Contact: Simon J D Cox
#          CSIRO Earth Science and Resource Engineering
#          PO Box 1130
#          Bentley
#          WA 6102
#          Australia
#          simon.cox@csiro.au
#

# ANDS Customizations



# The configuration must be customized for each vocabulary
# Sections that must be customized are bracketted by rows of hashes similar to the line below which ends this comment block
##############################################################

## Common prefixes - don't change these.
@prefix api:     <http://purl.org/linked-data/api/vocab#> .
@prefix dc:      <http://purl.org/dc/elements/1.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix elda:    <http://www.epimorphics.com/vocabularies/lda#> .
@prefix foaf:    <http://xmlns.com/foaf/0.1/> .
@prefix owl:     <http://www.w3.org/2002/07/owl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos:    <http://www.w3.org/2004/02/skos/core#> .
@prefix svoc:    <http://www.seegrid.csiro.au/siss/voc/> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .

@prefix andsvocabs: <http://vocabs.ands.org.au/schema/andsvocabs> .

## TODO: Add your own namespaces
## ${NAMESPACES}


##############################################################
## TODO: deployer to make changes here
## change "test" to give this API a name to distinguish it from any other API hosted by the same LDA service

svoc:${SVC_ID} a api:API

## it would be great if this could be made to help somehow, but ELDA does not currently appear to implement it
#	; api:base "http://def.seegrid.csiro.au/sissvoc${SVC_PREFIX}"

## end of TODO:
##############################################################

# generic SISSvoc stuff
	; api:maxPageSize "200"
	; api:defaultPageSize "10"
	; api:defaultFormatter [
			a api:XsltFormatter
			; api:name "html"
			; api:mimeType "text/html"
# the following property enables the stylesheet to work better, including linking the item properties to their definitions
# remove the ones you don't want
			; elda:metadataOptions "bindings,versions,formats"
# bindings	-	causes the inclusion of shortname to URI term bindings.
# versions	-	causes the inclusion of links for configured alternate views (as in api:viewer) in the result page metadata.
# execution	-	causes the inclusion of details about the LDA implementation and the executed sparql queries that produced the result.
# formats		-	causes the inclusion of links to build-in and configured format versions of the rendered page (.html, .ttl, .json etc. variants).

##############################################################
##
## TODO: deployer to make changes here
## change "ashtml.xsl" to the path for the result stylesheet for this API

			; api:stylesheet "${HTML_STYLESHEET}"
	]

## end of TODO:
##############################################################

        # ANDS override of default JSON formatter,
        # so as to get date/time values in ISO 8601 format.
        ; api:formatter [
                a api:JsonFormatter
                ; api:name "json"
                ; api:mimeType "application/json"
                ; elda:jsonUsesISOdate true
        ]
	; api:endpoint
                # ANDS: uncomment as needed.
		# svoc:LandingPage ,
		svoc:URIEndpoint ,
		svoc:conceptSchemeEndpoint ,
		svoc:conceptCollectionEndpoint ,
		svoc:conceptListEndpoint ,
		svoc:conceptLabelEndpoint ,
		svoc:conceptLabelContainsEndpoint ,
		svoc:broaderThanURIEndpoint ,
		svoc:narrowerThanURIEndpoint ,
		svoc:broaderTransitiveThanURIEndpoint ,
		svoc:narrowerTransitiveThanURIEndpoint ,
		svoc:broaderLabelEndpoint ,
		svoc:narrowerLabelEndpoint ,
		svoc:broaderTransitiveLabelEndpoint ,
		svoc:narrowerTransitiveLabelEndpoint ,
                # ANDS extras
                svoc:topConceptsByConceptSchemeEndpoint ,
                svoc:topConceptsEndpoint ,
                svoc:conceptByLabelNotationURIEndpoint ,
                svoc:inCollectionURIEndpoint ,
                svoc:allBroaderThanURIEndpoint ,
                svoc:allNarrowerThanURIEndpoint


	; api:defaultViewer api:describeViewer
	; elda:enableETags true

##############################################################
##
## TODO: deployer to make changes here
## replace DEPLOYPATH to be the actual deployed path on the webserver - style sheets are not currently functional for relative paths
## e.g. /sissvoc

	; api:variable [api:name "webapp"; api:value "${DEPLOYPATH}"]
	; api:variable
		[api:name "SISSDefaultResourceDirBase"; api:value "{webapp}/resources/default/"]
		, [api:name "myResourceDirBase"; api:value "{webapp}/resources/default/"]
		, [api:name "_resourceRoot"; api:value "{webapp}/lda-assets/"]
		, [api:name "resourcePath"; api:value "{webapp}${SVC_PREFIX}/resource"]
		, [api:name "resourceEndPoint"; api:value "{webapp}${SVC_PREFIX}/resource"]
                # ANDS-specific: a list endpoint that supports filters. Used
                # by searchURI-mode template in ands-ashtml-sissvoc.xsl.
                , [api:name "conceptSearchEndPoint"; api:value "{webapp}${SVC_PREFIX}/concept"]
		, [api:name "serviceTitle"; api:value "${SERVICE_TITLE}"]
		, [api:name "serviceAuthor"; api:value "${SERVICE_AUTHOR}"]
		, [api:name "serviceAuthorEmail"; api:value "${SERVICE_AUTHOR_EMAIL}"]
		, [api:name "serviceHomePage"; api:value "${SERVICE_HOMEPAGE}"]
		, [api:name "configID"; api:value "$Header$"]
                # ANDS-specific variables, used in ands-ashtml-sissvoc.xsl
                # These are legacy, from the original deployment on RDA.
                # The variables were called _vocabName, etc. but have now been
                # renamed to _ANDS_vocabName, etc. to show clearly that they
                # are ANDS customizations.
                , [api:name "_ANDS_vocabName"; api:value "${ANDS_VOCABNAME}"]
                , [api:name "_ANDS_vocabMore"; api:value "${ANDS_VOCABMORE}"]
                , [api:name "_ANDS_vocabAPIDoco"; api:value "${ANDS_VOCABAPIDOCO}"]
                # ANDS-specific configuration
                # Suppress isPrimaryTopicOf per Kim Finney request email 2015-02-25
                , [api:name "_suppress_ipto"; api:value "yes"]
                # Need to specify _velocityPath if SISSVoc has been deployed by
                # auto-expading a WAR file repository#api#lda.war.
                # ELDA looks for Velocity templates in
                # file:/usr/share/tomcat/webapps/repository%23api%23lda/_error_pages/velocity/
                # and doesn't find them.
                # So put in a symbolic link:
                # /usr/share/tomcat/lda_error_pages -> /usr/share/tomcat/webapps/repository#api#lda/_error_pages
                # And add this variable:
                #, [api:name "_velocityPath"; api:value "/usr/share/tomcat/lda_error_pages/velocity"]
                # Easier: don't put the webapp in ~tomcat/webapps/repository#api#lda, but put it elsewhere:
                # as ~tomcat/webapps-ands/lda. Then create a conf/Catalina/localhost/repository#api#lda.xml
                # with docBase set to ${catalina.home}/webapps-ands/lda.

## Set title of service. This shows up in the /api-config view.

	; rdfs:label "${SERVICE_LABEL}"@en

# document the provenance of this vocabulary with links to the source

#	; foaf:primaryTopic <http://dbpedia.org/resource/Pizza>
#	; rdfs:seeAlso <http://dbpedia.org/resource/Pizza>

# set the SPARQL endpoint

	; api:sparqlEndpoint <${SPARQL_ENDPOINT}>
	.

## end of TODO:
##############################################################

##############################################################
##
## TODO: deployer to make changes here
## SPARQL 1.1 endpoints ONLY!
## remove this if the endpoint does not support SPARQL 1.1

# ANDS: elda now requires SPARQL 1.1 and emits a warning if you _include_ this!

## <${SPARQL_ENDPOINT}> elda:supportsNestedSelect true .

## end of TODO:
##############################################################

#VIEWERS

svoc:viewerNone a api:Viewer
    ; api:name "none"
    .

svoc:basicConceptSchemeViewer a api:Viewer
    ; api:name "conceptScheme"
    ; api:property rdfs:label, skos:hasTopConcept
    .

svoc:basicCollectionViewer a api:Viewer
    ; api:name "collection"
    ; api:property rdfs:label, skos:prefLabel, skos:member
    .

# ANDS: This is the original svoc:basicConceptViewer
#svoc:basicConceptViewer a api:Viewer
#    ; api:name "concept"
#    ; api:property skos:prefLabel, skos:notation, skos:broader, skos:definition, skos:narrower
#    .

# ANDS: And this is the ANDS-specific concept viewer.
#  It fetches labels for narrower and broader concepts.
svoc:basicConceptViewer a api:Viewer
    ; api:name "concept"
    ; api:property skos:prefLabel, skos:notation,
      ( skos:broader skos:prefLabel ), skos:definition,
      ( skos:narrower skos:prefLabel ),
      dcterms:created, dcterms:modified
    .

# ANDS custom concept scheme viewer
#   This one fetches labels for top concepts.
andsvocabs:basicConceptSchemeViewerLabelled a api:Viewer
    ; api:name "scheme-labelled"
    ; api:property rdfs:label, ( skos:hasTopConcept skos:prefLabel )
    .

# ANDS custom concept viewer, based on svoc:basicConceptViewer
#   This one fetches labels for narrower and broader concepts.
# andsvocabs:basicConceptViewerNarrowerBroader a api:Viewer
#    ; api:name "concept-labelled"
#    ; api:include api:labelledDescribeViewer
#    ; api:property skos:prefLabel, skos:notation,
#      ( skos:broader skos:prefLabel ), skos:definition,
#      ( skos:narrower skos:prefLabel )
#    .

### andsvocabs:labelledDescribeViewerNarrowerBroader a api:Viewer
###     ; api:name "concept-labelled"
###     ; api:include api:labelledDescribeViewer
###     ; api:property 
###       ( skos:broader skos:prefLabel ),
###       ( skos:narrower skos:prefLabel )
###     .




# ANDS custom XML formatter
#   Implements the identity transformation, so you see all the XML.
#   Useful for debugging; shows you the input to an XSLT.

# Uncomment the next section when you need to do some debugging.
#andsvocabs:fullxml a api:XsltFormatter
#    ; api:name "fullxml"
#    ; api:mimeType "application/xml"
#    ; elda:metadataOptions "bindings,versions,formats"
#    ; api:stylesheet "resources/default/transform/ands-identity-transform.xsl"
#    .



#ENDPOINTS

## 000.000. This is the metadata identifier for the vocabulary content.

# ANDS: If the vocab has a "top-level" IRI, uncomment this in
# the api:endpoint setting above, and set the api:itemTemplate
# below to the vocab's top-level IRI.

svoc:LandingPage a api:ItemEndpoint
		; rdfs:comment "Landing Page for this resource"
		; api:uriTemplate  "${SVC_PREFIX}"
		; api:exampleRequestPath  "${SVC_PREFIX}"
		; api:itemTemplate  "http://resource.geosciml.org/classifierscheme/cgi/201202/faultmovementtype"
		; api:defaultViewer  api:labelledDescribeViewer
		; api:viewer  api:basicViewer,api:labelledDescribeViewer
		.


## 0. This is the basic "tell me what you know about the resource identified by this URI" request.
# ANDS: This endpoint's uriTemplate is referred to in the Vocab Toolkit's
# IRI resolution service. See:
#   au.org.ands.vocabs.toolkit.db.ResourceMapEntryUtils#RESOURCE_ENDPOINT.
svoc:URIEndpoint a api:ItemEndpoint
		; rdfs:comment "Describe this resource"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name
## set value of uri= to a URI from the vocabulary

		; api:uriTemplate  "${SVC_PREFIX}/resource?uri={URI}"
		; api:exampleRequestPath  "${SVC_PREFIX}/resource?uri=http://resource.geosciml.org/classifier/ics/ischart/Furongian"

## end of TODO:
##############################################################
		; api:itemTemplate  "{URI}"
		; api:defaultViewer  api:labelledDescribeViewer
		; api:viewer  api:basicViewer,api:describeViewer,api:labelledDescribeViewer
#		; api:viewer  svoc:labelledDescribeConceptViewer
# Uncomment the next line (and the definition of andsvocabs:fullxml above)
# when you need to do some debugging.
#                ; api:formatter andsvocabs:fullxml
		.

## 1. List of concept schemes - basic-view
svoc:conceptSchemeEndpoint a api:ListEndpoint
		; rdfs:comment "List all concept-schemes"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name

		; api:uriTemplate  "${SVC_PREFIX}/conceptscheme"
		; api:exampleRequestPath  "${SVC_PREFIX}/conceptscheme"

## end of TODO:
##############################################################
		; api:selector [	api:where " ?item a skos:ConceptScheme . " ]
		; api:defaultViewer  svoc:basicConceptSchemeViewer
		; api:viewer  api:basicViewer,svoc:basicConceptSchemeViewer,andsvocabs:basicConceptSchemeViewerLabelled
		.

## 2. List of concept collections - basic-view
svoc:conceptCollectionEndpoint a api:ListEndpoint
		; rdfs:comment "List all concept collections"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name

		; api:uriTemplate  "${SVC_PREFIX}/collection"
		; api:exampleRequestPath  "${SVC_PREFIX}/collection"

## end of TODO:
##############################################################
		; api:selector [
				api:where
					"{ ?item a skos:OrderedCollection } UNION { ?item a skos:Collection }"
			]
		; api:defaultViewer  svoc:basicCollectionViewer
		; api:viewer  api:basicViewer,svoc:basicCollectionViewer
		.

## 3. List of concepts - basic-view
svoc:conceptListEndpoint a api:ListEndpoint
		; rdfs:comment "List all concepts"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name

		; api:uriTemplate  "${SVC_PREFIX}/concept"
		; api:exampleRequestPath  "${SVC_PREFIX}/concept"

## end of TODO:
##############################################################
		; api:selector [
				api:where " ?item a skos:Concept . "
		]
		; api:defaultViewer svoc:basicConceptViewer
		; api:viewer  api:basicViewer,svoc:basicConceptViewer
# Uncomment the next line (and the definition of andsvocabs:fullxml above)
# when you need to do some debugging.
#                ; api:formatter andsvocabs:fullxml
		.

## 4. List of concepts where a label matches the text
svoc:conceptLabelEndpoint a api:ListEndpoint
		; rdfs:comment "List concepts where a skos label property has exact match to text"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name
## change value of anyLabel= to a label for a concept in this vocabulary

		; api:uriTemplate  "${SVC_PREFIX}/concept?anylabel={text}"
		; api:exampleRequestPath  "${SVC_PREFIX}/concept?anylabel=Cambrian"

## end of TODO:
##############################################################
		; api:selector [
				api:where
					""" { ?item skos:prefLabel ?l }
							UNION
							{ ?item skos:altLabel ?l }
							UNION
							{ ?item rdfs:label ?l }
							FILTER ( str(?l)=?text ) """
		]
		; api:defaultViewer svoc:basicConceptViewer
		; api:viewer  api:basicViewer,svoc:basicConceptViewer
		.

## 5. List of concepts where a label contains the text, any language, case-insensitive
svoc:conceptLabelContainsEndpoint a api:ListEndpoint
		; rdfs:comment "List concepts where a skos label property contains this text, case-insensitive"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name
## change value of labelcontains= to a word in a label for a concept in this vocabulary

		; api:uriTemplate  "${SVC_PREFIX}/concept?labelcontains={text}"
		; api:exampleRequestPath  "${SVC_PREFIX}/concept?labelcontains=cambrian"

## end of TODO:
##############################################################
		; api:selector [
				api:where
					""" { ?item skos:prefLabel ?l }
							UNION
							{ ?item skos:altLabel ?l }
							UNION
							{ ?item rdfs:label ?l }
							FILTER regex( str(?l) , ?text , 'i' ) """
		]
		; api:defaultViewer svoc:basicConceptViewer
		; api:viewer  api:basicViewer,svoc:basicConceptViewer
		.

## 6. List of concepts broader than the one identified by this URI
svoc:broaderThanURIEndpoint a api:ListEndpoint
		; rdfs:comment "List concepts broader than the one identified by this URI"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name
## change value of uri= to a uri for a concept in this vocabulary

		; api:uriTemplate  "${SVC_PREFIX}/concept/broader?uri={baseConcept}"
		; api:exampleRequestPath  "${SVC_PREFIX}/concept/broader?uri=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"

## end of TODO:
##############################################################
		; api:variable [ api:name "baseConcept"; api:type rdfs:Resource ]
		; api:selector [
				api:where " ?baseConcept skos:broader ?item . "
		]
		; api:defaultViewer svoc:basicConceptViewer
		; api:viewer  api:basicViewer,svoc:basicConceptViewer
		.

## 7. List of concepts narrower than the one identified by this URI
svoc:narrowerThanURIEndpoint a api:ListEndpoint
		; rdfs:comment "List concepts narrower than the one identified by this URI"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name
## change value of uri= to a uri for a concept in this vocabulary

		; api:uriTemplate  "${SVC_PREFIX}/concept/narrower?uri={baseConcept}"
		; api:exampleRequestPath  "${SVC_PREFIX}/concept/narrower?uri=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"

## end of TODO:
##############################################################
		; api:variable  [ api:name "baseConcept"; api:type rdfs:Resource ]
		; api:selector [
				api:where " ?baseConcept skos:narrower ?item . "
		]
		; api:defaultViewer svoc:basicConceptViewer
		; api:viewer  api:basicViewer,svoc:basicConceptViewer
		.

## 8. List of concepts broaderTransitive than the one identified by this URI
svoc:broaderTransitiveThanURIEndpoint a api:ListEndpoint
		; rdfs:comment "List concepts broaderTransitive than the one identified by this URI"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name
## change value of uri= to a uri for a concept in this vocabulary

		; api:uriTemplate  "${SVC_PREFIX}/concept/broaderTransitive?uri={baseConcept}"
		; api:exampleRequestPath  "${SVC_PREFIX}/concept/broaderTransitive?uri=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"

## end of TODO:
##############################################################
		; api:variable  [ api:name "baseConcept"; api:type rdfs:Resource ]
		; api:selector [
				api:where " ?baseConcept skos:broaderTransitive ?item . "
		]
		; api:defaultViewer svoc:basicConceptViewer
		; api:viewer  api:basicViewer,svoc:basicConceptViewer
		.

## 9. List of concepts narrowerTransitive than the one identified by this URI
svoc:narrowerTransitiveThanURIEndpoint a api:ListEndpoint
		; rdfs:comment "List concepts narrowerTransitive than the one identified by this URI"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name
## change value of uri= to a uri for a concept in this vocabulary

		; api:uriTemplate  "${SVC_PREFIX}/concept/narrowerTransitive?uri={baseConcept}"
		; api:exampleRequestPath  "${SVC_PREFIX}/concept/narrowerTransitive?uri=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"

## end of TODO:
##############################################################
		; api:variable  [ api:name "baseConcept"; api:type rdfs:Resource ]
		; api:selector [
				api:where " ?baseConcept skos:narrowerTransitive ?item . "
		]
		; api:defaultViewer svoc:basicConceptViewer
		; api:viewer  api:basicViewer,svoc:basicConceptViewer
		.

## 10. List of concepts broader than the one where a label matches the text
svoc:broaderLabelEndpoint a api:ListEndpoint
		; rdfs:comment "List concepts broader than any concepts with this exact label"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name
## change value of anyLabel= to a label for a concept in this vocabulary

		; api:uriTemplate  "${SVC_PREFIX}/concept/broader?anylabel={text}"
		; api:exampleRequestPath  "${SVC_PREFIX}/concept/broader?anylabel=Cambrian"

## end of TODO:
##############################################################
		; api:selector [
				api:where
					""" ?i0 skos:broader ?item .
							{ ?i0 rdfs:label ?l }
							UNION
							{ ?i0 skos:prefLabel ?l }
							UNION
							{ ?i0 skos:altLabel ?l }
							FILTER ( str(?l)=?text ) """
		]
		; api:defaultViewer svoc:basicConceptViewer
		; api:viewer  api:basicViewer,svoc:basicConceptViewer
		.

## 11. List of concepts narrower than the one where a label matches the text
svoc:narrowerLabelEndpoint a api:ListEndpoint
		; rdfs:comment "List concepts narrower than any concepts with this exact label"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name
## change value of anyLabel= to a label for a concept in this vocabulary

		; api:uriTemplate  "${SVC_PREFIX}/concept/narrower?anylabel={text}"
		; api:exampleRequestPath  "${SVC_PREFIX}/concept/narrower?anylabel=Cambrian"

## end of TODO:
##############################################################
		; api:selector [
				api:where
					""" ?i0 skos:narrower ?item .
							{ ?i0 rdfs:label ?l }
							UNION
							{ ?i0 skos:prefLabel ?l }
							UNION
							{ ?i0 skos:altLabel ?l }
							FILTER ( str(?l)=?text ) """
		]
		; api:defaultViewer svoc:basicConceptViewer
		; api:viewer  api:basicViewer,svoc:basicConceptViewer
		.

## 12. List of concepts broaderTransitive than the one where a label matches the text
svoc:broaderTransitiveLabelEndpoint a api:ListEndpoint
		; rdfs:comment "List concepts broaderTransitive than any concepts with this exact label"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name
## change value of anyLabel= to a label for a concept in this vocabulary

		; api:uriTemplate  "${SVC_PREFIX}/concept/broaderTransitive?anylabel={text}"
		; api:exampleRequestPath  "${SVC_PREFIX}/concept/broaderTransitive?anylabel=Cambrian"

## end of TODO:
##############################################################
		; api:selector [
				api:where
					""" ?i0 skos:broaderTransitive ?item .
							{ ?i0 rdfs:label ?l }
							UNION
							{ ?i0 skos:prefLabel ?l }
							UNION
							{ ?i0 skos:altLabel ?l }
							FILTER ( str(?l)=?text ) """
		]
		; api:defaultViewer svoc:basicConceptViewer
		; api:viewer  api:basicViewer,svoc:basicConceptViewer
		.

## 13. List of concepts narrowerTransitive than the one where a label matches the text
svoc:narrowerTransitiveLabelEndpoint a api:ListEndpoint
		; rdfs:comment "List concepts narrowerTransitive than any concepts with this exact label"
##############################################################
##
## TODO: deployer to make changes here
## change "test" to vocab name
## change value of anyLabel= to a label for a concept in this vocabulary

		; api:uriTemplate  "${SVC_PREFIX}/concept/narrowerTransitive?anylabel={text}"
		; api:exampleRequestPath  "${SVC_PREFIX}/concept/narrowerTransitive?anylabel=Cambrian"

## end of TODO:
##############################################################
		; api:selector [
				api:where
					""" ?i0 skos:narrowerTransitive ?item .
							{ ?i0 rdfs:label ?l }
							UNION
							{ ?i0 skos:prefLabel ?l }
							UNION
							{ ?i0 skos:altLabel ?l }
							FILTER ( str(?l)=?text ) """
		]
		; api:defaultViewer svoc:basicConceptViewer
		; api:viewer  api:basicViewer,svoc:basicConceptViewer
		.

##############################################################
##
## TODO: deployer to make changes here
## if the vocabulary contains 'skos:notation' values and these are available for queries,

## end of TODO:
##############################################################


# ANDS extra endpoints


# List all of the top concepts in the vocabulary.
svoc:topConceptsEndpoint a api:ListEndpoint
                ; rdfs:comment "List all concepts which are topConcepts of the vocabulary"
                ; api:uriTemplate  "${SVC_PREFIX}/concept/topConcepts"
                ; api:exampleRequestPath  "${SVC_PREFIX}/concept/topConcepts"
                ; api:selector [
                                api:where " ?item a skos:Concept . ?l skos:hasTopConcept ?item . "
                ]
                ; api:defaultViewer svoc:basicConceptViewer
                ; api:viewer  api:basicViewer,svoc:basicConceptViewer
                .

# List of top concepts for a specific conceptscheme.
svoc:topConceptsByConceptSchemeEndpoint a api:ListEndpoint
                ; rdfs:comment "List all concepts which are topConcepts of the vocabulary"
                ; api:uriTemplate  "${SVC_PREFIX}/concept/topConcepts?scheme={scheme_uri}"
                ; api:exampleRequestPath  "${SVC_PREFIX}/concept/topConcepts?scheme=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"
                ; api:variable  [ api:name "scheme_uri"; api:type rdfs:Resource ]
                ; api:selector [
                                api:where " ?item a skos:Concept .  ?scheme_uri skos:hasTopConcept ?item . "
                ]
                ; api:defaultViewer svoc:basicConceptViewer
                ; api:viewer  api:basicViewer,svoc:basicConceptViewer
                .

# Other endpoints needed specifically for the ANDS Vocab Widget.

# List of concepts where either there's a match:
# (a) against an rdfs:label, skos:prefLabel, or skos:altLabel, case-insensitive
# (b) against a skos:notation, exact match
# (c) against the concept's IRI, case-insensitive, as long as the concep also has a skos:prefLabel.
svoc:conceptByLabelNotationURIEndpoint a api:ListEndpoint
                 ; rdfs:comment "List concepts where an RDF label, or a SKOS label/notation, or the concept's own IRI contains this text, case-insensitive"
                 ; api:uriTemplate  "${SVC_PREFIX}/concept?anycontains={text}"
                 ; api:exampleRequestPath  "${SVC_PREFIX}/concept?anycontains=Cambrian"
                 ; api:selector [
                                 api:where " ?item a skos:Concept .  ?item ?label ?l . FILTER (   ((?label = rdfs:label || ?label = skos:prefLabel || ?label = skos:altLabel ) && regex( str(?l) , ?text , 'i' )   )|| ((?label= skos:notation ) && str(?l) = ?text )   || ( regex( str(?item), ?text, 'i') && ( ?label = skos:prefLabel ))   ) " ## URI match, only when the URI has a prefLabel
                                ]
                 ; api:defaultViewer svoc:basicConceptViewer
                 ; api:viewer  api:basicViewer,svoc:basicConceptViewer
                 .

# List of concepts in the specified collection
svoc:inCollectionURIEndpoint a api:ListEndpoint
                ; rdfs:comment "List of concepts which are members of the collection identified by this URI"
                ; api:uriTemplate  "${SVC_PREFIX}/concept/inCollection?uri={baseCollection}"
                ; api:exampleRequestPath  "${SVC_PREFIX}/concept/inCollection?uri=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"
                ; api:variable  [ api:name "baseCollection"; api:type rdfs:Resource ]
                ; api:selector [
                                # counter-intuitively, skos:member property indicates the object is a member of the subject
                                api:where " ?baseCollection skos:member ?item . "
                ]
                ; api:defaultViewer svoc:basicConceptViewer
                ; api:viewer  api:basicViewer,svoc:basicConceptViewer
                .

# Special endpoint needed by the RDA harvester for the enrichment process.
# Provided as a courtesy for all other vocabularies.
# Recursively list all concepts that are broader than the one identified by this URI
svoc:allBroaderThanURIEndpoint a api:ListEndpoint
                ; rdfs:comment "Recursively list concepts broader than the one identified by this URI"
                ; api:uriTemplate  "${SVC_PREFIX}/concept/allBroader?uri={baseConcept}"
                ; api:exampleRequestPath  "${SVC_PREFIX}/concept/allBroader?uri=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"
                ; api:variable  [ api:name "baseConcept"; api:type rdfs:Resource ]
                ; api:selector [ # logically unintuitive, note order of subject, object
                                api:where " ?item skos:narrower+ ?baseConcept  "
                ]
                ; api:defaultViewer svoc:basicConceptViewer
                ; api:viewer  api:basicViewer,svoc:basicConceptViewer
                .

# Needed by the vocab widget.
# Recursively list all concepts that are narrower than the one identified by this URI
svoc:allNarrowerThanURIEndpoint a api:ListEndpoint
                ; rdfs:comment "Recursively list concepts narrower than the one identified by this URI"
                ; api:uriTemplate  "${SVC_PREFIX}/concept/allNarrower?uri={baseConcept}"
                ; api:exampleRequestPath  "${SVC_PREFIX}/concept/allNarrower?uri=http://resource.geosciml.org/classifier/ics/ischart/Furongian"
                ; api:variable  [ api:name "baseConcept"; api:type rdfs:Resource ]
                ; api:selector [ # logically unintuitive, note order of subject, object
                                api:where " ?item skos:broader+ ?baseConcept "
                ]
                ; api:defaultViewer svoc:basicConceptViewer
                ; api:viewer  api:basicViewer,svoc:basicConceptViewer
                .



#
# VOCABULARY
#
# The vocabulary declarations say which properties can be used in queries
# and by what short name those properties are known. If property P with short
# name Q has range type T, then a query parameters Q=V is translated to
# a WHERE clause fragment ?item P V' where V' is a literal which is V
# with type T. This is especially important for numbers and booleans.
#

## RDF
rdf:type
    api:label "type" ;
    rdfs:range rdfs:Class .

## RDFS
rdfs:label
    api:label "label" ;
    api:structured true;
    a           rdf:Property .

rdfs:comment
    api:label "comment" ;
    api:structured true;
    a           rdf:Property .

## SKOS
skos:Concept
		api:label "Concept" ;
		a         rdfs:Class .

skos:ConceptScheme
		api:label "ConceptScheme" ;
		a         rdfs:Class .

skos:topConceptOf
		api:label "topConceptOf" ;
		rdfs:range      skos:ConceptScheme .

skos:hasTopConcept
		api:label "hasTopConcept" ;
		api:multiValued true ;
		rdfs:range      skos:Concept .

skos:inScheme
		api:label "inScheme" ;
		rdfs:domain	skos:Concept ;
		rdfs:range      skos:ConceptScheme .

skos:member
		api:label "member" ;
		api:multiValued true ;
		rdfs:domain	skos:Collection ;
		rdfs:range      skos:Concept .

skos:memberList
                api:label "memberList" ;
                rdfs:domain     skos:OrderedCollection ;
                rdfs:range      skos:Concept .

skos:prefLabel
		api:label "prefLabel" ;
		api:structured true;
		a           rdf:Property .

skos:definition
                api:label "definition" ;
                a           rdf:Property .

skos:altLabel
		api:label "altLabel" ;
		api:multiValued true ;
		api:structured true;
		a         rdf:Property  .

skos:hiddenLabel
		api:label "hiddenLabel" ;
		api:multiValued true ;
		api:structured true;
		a         rdf:Property  .

skos:notation
		a owl:DatatypeProperty;
		api:label "notation"  .


skos:semanticRelation
                api:label "semanticRelation" ;
                api:multiValued true ;
                rdfs:range      skos:Concept .

skos:related
                api:label "related" ;
                api:multiValued true ;
                rdfs:range      skos:Concept .

skos:broader
                api:label "broader" ;
                api:multiValued true ;
                rdfs:range      skos:Concept .

skos:narrower
                api:label "narrower" ;
                api:multiValued true ;
                rdfs:range      skos:Concept .

skos:broaderTransitive
                api:label "broaderTransitive" ;
                api:multiValued true ;
                rdfs:range      skos:Concept .

skos:narrowerTransitive
                api:label "narrowerTransitive" ;
                api:multiValued true ;
                rdfs:range      skos:Concept .

skos:mappingRelation
                api:label "mappingRelation" ;
                api:multiValued true ;
                rdfs:range      skos:Concept .

skos:closeMatch
                api:label "closeMatch" ;
                api:multiValued true ;
                rdfs:range      skos:Concept .

skos:exactMatch
                api:label "exactMatch" ;
                api:multiValued true ;
                rdfs:range      skos:Concept .

skos:broadMatch
                api:label "broadMatch" ;
                api:multiValued true ;
                rdfs:range      skos:Concept .

skos:narrowMatch
                api:label "narrowMatch" ;
                api:multiValued true ;
                rdfs:range      skos:Concept .

skos:relatedMatch
                api:label "relatedMatch" ;
                api:multiValued true ;
                rdfs:range      skos:Concept .


# ANDS:

## Dublin Core

# "Legacy" DC metadata can be used with both literal and non-literal
# values: see http://wiki.dublincore.org/index.php/User_Guide/Publishing_Metadata
# So we don't specify an rdfs:range for these.

dc:publisher
                api:label "dcPublisher" ;
                a      rdfs:Property .

dc:source
                api:label "dcSource" ;
                a      rdfs:Property .

dc:title
                api:label "dcTitle" ;
                a      rdfs:Property .


# Some dcterms metadata elements have a specified range.

### dcterms:contributor
###                 api:label "dctermsContributor" ;
###                 a      rdfs:Property ;
###                 rdfs:range     rdfs:Literal .

dcterms:created
                api:label "dctermsCreated" ;
                a      rdfs:Property ;
                rdfs:range     xsd:dateTime .

dcterms:description
                api:label "dctermsDescription" ;
                a      rdfs:Property ;
                rdfs:range     rdfs:Literal .

dcterms:modified
                api:label "dctermsModified" ;
                a      rdfs:Property ;
                rdfs:range     xsd:dateTime .

dcterms:title
                api:label "dctermsTitle" ;
                a      rdfs:Property ;
                rdfs:range     rdfs:Literal .

