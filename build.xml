<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE ant>
<project
  basedir="."
  default="war"
  name="ANDS-Vocabs-Toolkit"
  xmlns:jacoco="antlib:org.jacoco.ant"
  >
  <property environment="env" />
  <property name="debuglevel" value="source,lines,vars" />
  <property name="target" value="1.8" />
  <property name="source" value="1.8" />

  <property name="build" value="build" />
  <property name="build-test" value="build-test" />
  <!-- Configuration files: toolkit.properties, logback.xml -->
  <property name="conf" value="conf" />
  <property name="conf-test" value="conf-test" />
  <property name="jar" value="vocabtoolkit.jar" />
  <property name="war" value="vocabtoolkit.war" />
  <property name="javadoc-output" value="doc/javadoc" />
  <property name="swagger-output" value="doc/api" />
  <property name="test-output" value="test-output" />
  <property name="jacoco-output" value="jacoco.exec" />
  <property name="jacoco-report" value="jacoco-report" />

  <taskdef
    resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
    classpath="libdev/checkstyle-6.19/checkstyle-6.19-all.jar" />

  <taskdef
      name="forbiddenapis"
      classname="de.thetaphi.forbiddenapis.ant.AntTask"
      classpath="libdev/forbidden-apis-2.2/forbiddenapis-2.2.jar" />

  <taskdef resource="testngtasks"
    classpath="libdev/testng-6.9.10/testng-6.9.10.jar" />

  <taskdef
    uri="antlib:org.jacoco.ant"
    resource="org/jacoco/ant/antlib.xml">
    <classpath path="libdev/jacoco-0.7.6.201602180812/jacocoant.jar" />
  </taskdef>

  <target name="clean">
    <delete dir="${build}" />
    <delete dir="${build-test}" />
    <delete file="${jar}" />
    <delete file="${war}" />
    <delete dir="${javadoc-output}" />
    <delete dir="${swagger-output}" />
    <delete dir="${test-output}" />
    <delete file="${jacoco-output}" />
    <delete dir="${jacoco-report}" />
  </target>

  <path id="compile-main.classpath">
    <fileset dir="lib" includes="**/*.jar" />
    <fileset dir="tomcatlib" includes="**/*.jar" />
  </path>

  <path id="compile-test.classpath">
    <pathelement path="${build}" />
    <fileset dir="lib" includes="**/*.jar" />
    <fileset dir="libdev" includes="**/*.jar" />
    <fileset dir="tomcatlib" includes="**/*.jar" />
  </path>

  <path id="dev-compile-main.classpath">
    <fileset dir="lib" includes="**/*.jar" />
    <fileset dir="libdev" includes="**/*.jar" />
    <fileset dir="tomcatlib" includes="**/*.jar" />
  </path>

  <target name="compile-main">
    <mkdir dir="${build}" />
    <javac debug="true" debuglevel="${debuglevel}" destdir="${build}" includeantruntime="false" source="${source}" target="${target}">
      <src path="src/main/java" />
      <!-- Don't include test classes. For now, if you want to use
           the test classes, use the project in Eclipse.
      <src path="src/test/java" />
      -->
      <classpath refid="compile-main.classpath" />
    </javac>
  </target>

  <target name="compile-test" depends="compile-main">
    <mkdir dir="${build-test}" />
    <javac debug="true" debuglevel="${debuglevel}" destdir="${build-test}" includeantruntime="false" source="${source}" target="${target}">
      <src path="src/test/java" />
      <classpath refid="compile-test.classpath" />
    </javac>
  </target>

  <!-- JAR not usable in the WAR, as JPA seems to require both
       persistence.xml and entity classes to be at the "top level",
       i.e., in WEB-INF/classes.
    <target name="jar" depends="compile-main">
        <jar destfile="${jar}">
            <fileset dir="${build}" />
        </jar>
    </target>
   -->
  <target name="war" depends="compile-main,update-version-string">
    <war destfile="${war}">
      <metainf dir="WebContent/META-INF" />
      <webinf dir="WebContent/WEB-INF" />
      <!-- Copy persistence.xml -->
      <mappedresources>
        <fileset dir="src/main/java/META-INF" />
        <globmapper from="*" to="WEB-INF/classes/META-INF/*" />
      </mappedresources>
      <!-- Need to use this trick instead of a lib element because
           the JAR files are stored in subdirectories.
           See http://stackoverflow.com/questions/2802671/how-to-perform-ant-path-mapping-in-a-war-task -->
      <mappedresources>
        <fileset dir="lib" includes="**/*.jar" />
        <chainedmapper>
          <flattenmapper />
          <globmapper from="*" to="WEB-INF/lib/*" />
        </chainedmapper>
      </mappedresources>
      <!-- Can't use JAR; see above. -->
      <!-- <lib file="${jar}" /> -->
      <!-- Include raw classes instead. -->
      <classes dir="${build}" />
      <mappedresources>
        <fileset dir="${conf}" />
        <globmapper from="*" to="WEB-INF/classes/*" />
      </mappedresources>
    </war>
  </target>

  <!-- The following targets are based on:
       http://llbit.se/?p=1876 -->

  <!-- To do a new release, create and commit a new version of
       version.properties.
       NB: in next line, remove slash between the two hyphens!
       (XML thinks two consecutive hyphens end the comment.)
       Call git update-index -/-no-assume-unchanged conf/version.properties
       to enable git to do the commit of the file.
       Specify -DToolkit.version=XYZ on the ant command line when building
       so as to inhibit creating a new version.properties.
       (Literally "XYZ" or something else; the value doesn't matter.
       This is not specifying a version number; just defining the property
       inhibits the update-version-string target.) -->

  <!-- this target is only run if the 'version' property is undefined -->
  <target name="update-version-string" depends="-timestamp" unless="Toolkit.version">
    <!-- get a new version string using git describe if possible -->
    <echo message="Updating version string..." />
    <exec executable="git" outputproperty="Toolkit.version" failifexecutionfails="false">
      <arg value="describe" />
    </exec>
    <antcall target="-store-version-string" />
    <!-- ensure version is defined even if git was not available -->
    <property file="${conf}/version.properties" />
  </target>

  <target name="-timestamp">
    <tstamp>
      <format property="Toolkit.versionTimestamp" timezone="UTC" pattern="yyyy-MM-dd'T'HH:mm'Z'" />
      <format property="Toolkit.buildDate" timezone="UTC" pattern="yyyy-MM-dd" />
    </tstamp>
  </target>

  <target name="-store-version-string" depends="-timestamp" if="Toolkit.version">
    <!-- store the new  version string in the correct property file -->
    <echo message="version=${Toolkit.version}" />
    <propertyfile file="${conf}/version.properties">
      <entry key="Toolkit.version" value="${Toolkit.version}" />
      <entry key="Toolkit.versionTimestamp" value="${Toolkit.versionTimestamp}" />
      <entry key="Toolkit.buildDate" value="${Toolkit.buildDate}" />
    </propertyfile>
    <exec executable="git">
      <arg value="update-index" />
      <arg value="--assume-unchanged" />
      <arg value="${conf}/version.properties" />
    </exec>
  </target>

  <target name="javadoc">
    <javadoc sourcepath="src/main/java;src/test/java"
             destdir="${javadoc-output}"
             classpathref="dev-compile-main.classpath"
             linksource="true"
             includenosourcepackages="true"
             private="true"
             >
      <tag name="responseMessage" description="HTTP Response Status:" />
      <tag name="paramsAllowableValues"
        description="Allowable Values for Parameters:" />
      <tag name="responseType" description="Response Type:" />
    </javadoc>
  </target>

  <target name="swagger">
    <javadoc sourcepath="src/main/java"
             destdir="${swagger-output}"
             classpathref="dev-compile-main.classpath"
             linksource="true"
             includenosourcepackages="true"
             private="true"
             >
      <doclet
        name="com.tenxerconsulting.swagger.doclet.ServiceDoclet"
        path="libdev/swagger-doclet-1.1.3/swagger-doclet-1.1.3.jar"
        >
        <param name="-apiVersion" value="1"/>
        <param name="-docBasePath" value="."/>
        <param name="-apiBasePath"
          value="http://devl.ands.org.au/repository/api/toolkit"/>
      </doclet>
    </javadoc>
  </target>


  <target name="checkstyle"
          description="Generates a report of code convention violations.">

    <!-- Be very picky: fail even on a single warning. -->
    <checkstyle config="ands-checkstyle.xml"
        maxWarnings="0">
      <!-- Options that could be added to checkstyle element: -->
      <!--    failureProperty="checkstyle.failure" -->
      <!--    failOnViolation="false" -->
      <!-- classpathref seems not to be needed: -->
      <!--    classpathref="compile-main.classpath" -->
      <!-- Possible future work: write report to a file: -->
      <!--  <formatter type="xml" tofile="checkstyle_report.xml"/> -->
      <!-- Define "samedir" property as used in the config. (The
           "samedir" property is an Eclipse-CS thing. -->
      <property key="samedir" value="." />
      <fileset dir="src/main" includes="**/*.java"/>
      <fileset dir="src/test" includes="**/*.java"/>
    </checkstyle>

    <!-- Possible future work: if generating a report, make a pretty
         version. -->
    <!--  <style in="checkstyle_report.xml"
                 out="checkstyle_report.html"
                 style="checkstyle.xsl"/> -->

  </target>

  <!-- For now, we don't fail the build on failing this!
       For a rainy day: come back to this, and remove
       as many of the reported violations as possible.
  -->
  <target name="forbidden-checks" depends="compile-main">
    <forbiddenapis
        classpathref="compile-main.classpath"
        dir="${build}"
        targetVersion="${target}">
      <bundledsignatures name="jdk-unsafe"/>
      <bundledsignatures name="jdk-deprecated"/>
      <bundledsignatures name="jdk-internal"/>
      <bundledsignatures name="jdk-non-portable"/>
      <bundledsignatures name="jdk-system-out"/>
      <bundledsignatures name="jdk-reflection"/>
      <bundledsignatures name="commons-io-unsafe-2.4"/>
    </forbiddenapis>
  </target>

  <property name="resources-test-input" value="src/test/resources/deploy" />

  <path id="testng.classpath">
    <pathelement path="${build}" />
    <pathelement path="${build-test}" />
    <fileset dir="lib">
      <include name="**/*.jar" />
      <exclude name="javamelody*/*.jar" />
      <!-- No, don't exclude MySQL.
        au.org.ands.vocabs.toolkit.utils.RewriteCurrent
        makes use of
        com.mysql.jdbc.exceptions.jdbc4.CommunicationsException.
      exclude name="mysql*/*.jar"  -->
      <exclude name="mysql*/*.jar" />
      <exclude name="**/*javadoc*.jar" />
      <exclude name="**/*sources*.jar" />
    </fileset>
    <fileset dir="libtest">
      <include name="**/*.jar" />
      <exclude name="**/*javadoc*.jar" />
      <exclude name="**/*sources*.jar" />
    </fileset>
    <fileset dir="libdev">
      <include name="**/*.jar" />
      <exclude name="**/*javadoc*.jar" />
      <exclude name="**/*sources*.jar" />
      <exclude name="arquillian-notyet/**/*.jar" />
    </fileset>
    <fileset dir="tomcatlib" includes="**/*.jar" />
    <!-- Include conf-test for arquillian.xml. -->
    <pathelement path="${conf-test}" />
    <pathelement path="${resources-test-input}" />
  </path>


  <target name="testng" depends="compile-test">
    <jacoco:coverage
      destfile="${jacoco-output}">
      <testng
        classpathref="testng.classpath"
      >
        <jvmarg
          value="-DPROPS_FILE=WEB-INF/classes/toolkit-h2.properties" />
        <jvmarg
          value="-DPROPS_FILE_CLIENT_MODE=conf/toolkit-h2.properties" />
        <jvmarg
          value="-DVERSION_PROPS_FILE=conf/version.properties" />
        <jvmarg
          value="-DdumpClasspath" />
        <jvmarg
          value="-DdumpProperties" />
        <xmlfileset dir="src/test/resources" includes="arquillian-tests.xml"/>
      </testng>
    </jacoco:coverage>
    <jacoco:report>
      <executiondata>
        <file file="jacoco.exec"/>
      </executiondata>
      <structure name="ANDS-Vocabs-Toolkit">
        <classfiles>
          <fileset dir="${build}"/>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="src/main/java"/>
        </sourcefiles>
      </structure>
      <html destdir="${jacoco-report}"/>
    </jacoco:report>
  </target>

  <!-- Target for running TestNG in Bamboo. Relies on Bamboo
      variables for passwords.
      To test locally on the command line:
      ant \
      -DbambooBuildWorkingDirectory=$(pwd) \
      -DbambooPoolPartyHarvesterRemoteUrl=http://pp.url/ \
      -DbambooPoolPartyHarvesterUsername=username-splat \
      -DbambooPoolPartyHarvesterPassword=password-splat \
      testng-bamboo
      To test within Bamboo:
      ant \
      -DbambooBuildWorkingDirectory=${bamboo.build.working.directory} \
      -DbambooPoolPartyHarvesterRemoteUrl=http://pp.url/ \
      -DbambooPoolPartyHarvesterUsername=username-splat \
      -DbambooPoolPartyHarvesterPassword=password-splat \
      testng-bamboo
  -->
  <target name="testng-bamboo" depends="compile-test">
    <copy
      file="conf/toolkit-h2-bamboo-template.properties"
      tofile="conf/toolkit-h2-bamboo.properties">
      <filterset>
        <filter
          token="bambooBuildWorkingDirectory"
          value="${bambooBuildWorkingDirectory}" />
        <filter
          token="bambooPoolPartyHarvesterRemoteUrl"
          value="${bambooPoolPartyHarvesterRemoteUrl}" />
        <filter
          token="bambooPoolPartyHarvesterUsername"
          value="${bambooPoolPartyHarvesterUsername}" />
        <filter
          token="bambooPoolPartyHarvesterPassword"
          value="${bambooPoolPartyHarvesterPassword}" />
      </filterset>
    </copy>
    <jacoco:coverage
      destfile="${jacoco-output}">
      <testng
        classpathref="testng.classpath"
      >
        <jvmarg value=
          "-DPROPS_FILE=WEB-INF/classes/toolkit-h2-bamboo.properties" />
        <jvmarg
          value="-DPROPS_FILE_CLIENT_MODE=conf/toolkit-h2-bamboo.properties" />
        <jvmarg
          value="-DVERSION_PROPS_FILE=conf/version.properties" />
        <jvmarg
          value="-DdumpClasspath" />
        <jvmarg
          value="-DdumpProperties" />
        <xmlfileset dir="src/test/resources" includes="arquillian-tests.xml"/>
      </testng>
    </jacoco:coverage>
    <jacoco:report>
      <executiondata>
        <file file="jacoco.exec"/>
      </executiondata>
      <structure name="ANDS-Vocabs-Toolkit">
        <classfiles>
          <fileset dir="${build}"/>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="src/main/java"/>
        </sourcefiles>
      </structure>
      <html destdir="${jacoco-report}"/>
    </jacoco:report>
  </target>

</project>
