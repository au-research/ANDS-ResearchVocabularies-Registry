/** See the file "LICENSE" for the full license governing this code. */

package au.org.ands.vocabs.registry.api.auth;

import java.util.concurrent.TimeUnit;

import javax.ws.rs.ext.ContextResolver;
import javax.ws.rs.ext.Provider;

import org.pac4j.core.client.Clients;
import org.pac4j.core.client.direct.AnonymousClient;
import org.pac4j.core.config.Config;
import org.pac4j.core.credentials.authenticator.LocalCachingAuthenticator;
import org.pac4j.http.client.direct.CookieClient;
import org.pac4j.http.client.direct.DirectBasicAuthClient;
import org.pac4j.http.client.direct.HeaderClient;
import org.pac4j.jax.rs.pac4j.JaxRsConfig;
import org.pac4j.jax.rs.pac4j.JaxRsUrlResolver;

import au.org.ands.vocabs.roles.utils.PropertyConstants;
import au.org.ands.vocabs.roles.utils.RolesProperties;

/** Create the pac4j configuration.
 */
@Provider
public class AuthConfig implements ContextResolver<Config> {

    /** Size of the credentials caches. */
    private static final int CACHE_SIZE = 100;
    /** Cache credentials for this number of minutes. */
    private static final int CACHE_TIME = 15;

    /** The name of the cookie generated by the CodeIgniter framework
     * and as configured by Research Data Australia. If not specified
     * in the properties file, defaults to
     * {@link PropertyConstants#ROLES_RDA_COOKIE_NAME_DEFAULT}. */
    public static final String RDA_COOKIE_NAME =
            RolesProperties.getProperty(
                    PropertyConstants.ROLES_RDA_COOKIE_NAME,
                    PropertyConstants.ROLES_RDA_COOKIE_NAME_DEFAULT);

    /** The pac4j configuration. */
    private JaxRsConfig configInstance;

    /** Get the instance of the pac4j configuration, creating
     * it if this is the first time the method is being called.
     * @return The instance of the pac4j configuration.
     */
    private Config getInstance() {
        if (configInstance != null) {
            // This method has already completed.
            return configInstance;
        }

        // Client that accepts a username/password.
        DirectBasicAuthClient userpassClient = new DirectBasicAuthClient(
                new LocalCachingAuthenticator<>(
                new BuiltinAuthenticator(),
                CACHE_SIZE, CACHE_TIME, TimeUnit.MINUTES));
        userpassClient.setName(AuthConstants.USERPASS_CLIENT);

        // Header Client that accepts cookies generated by RDA.
        HeaderClient rdaHeaderClient = new HeaderClient(
                RDA_COOKIE_NAME,
                new LocalCachingAuthenticator<>(
                new RdaCookieAuthenticator(),
                CACHE_SIZE, CACHE_TIME, TimeUnit.MINUTES));
        rdaHeaderClient.setName(AuthConstants.RDA_HEADER_CLIENT);

        // Cookie Client that accepts cookies generated by RDA.
        CookieClient rdaCookieClient = new CookieClient(
                RDA_COOKIE_NAME,
                new LocalCachingAuthenticator<>(
                new RdaCookieAuthenticator(),
                CACHE_SIZE, CACHE_TIME, TimeUnit.MINUTES));
        rdaCookieClient.setName(AuthConstants.RDA_COOKIE_CLIENT);

        // Anonymous Client.
        AnonymousClient anonClient = new AnonymousClient();
        anonClient.setName(AuthConstants.ANON_CLIENT);

        // For a successful login, fetch the user's roles.
        userpassClient.addAuthorizationGenerator(new AuthorizationFetcher());
        rdaCookieClient.addAuthorizationGenerator(new AuthorizationFetcher());

        // The list of clients should match the value of
        // AuthConstants.MUST_HAVE_CREDENTIALS and
        // AuthConstants.MAY_HAVE_CREDENTIALS.
        Clients clients = new Clients(
                userpassClient,
                rdaHeaderClient,
                rdaCookieClient,
                anonClient
                );

          configInstance = new JaxRsConfig();
          configInstance.setClients(clients);
          configInstance.setDefaultClients(
                  AuthConstants.MAY_HAVE_CREDENTIALS);
          configInstance.getClients().setUrlResolver(
                new JaxRsUrlResolver());

        return configInstance;
    }

    /** Get the pac4j configuration. The configuration is only created once
     * per instance of this class; subsequent invocations of this method
     * return the same configuration instance.
     * @return The pac4j configuration.
     */
    @Override
    public Config getContext(final Class<?> type) {
        return getInstance();
    }

}
